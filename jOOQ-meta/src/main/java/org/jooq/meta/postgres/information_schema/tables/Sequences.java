/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.meta.postgres.information_schema.tables;

import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.postgres.information_schema.InformationSchema;
import org.jooq.meta.postgres.information_schema.Keys;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Sequences extends TableImpl<Record> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>information_schema.sequences</code> */
  public static final Sequences SEQUENCES = new Sequences();

  /** The class holding records for this type */
  @Override
  public Class<Record> getRecordType() {
    return Record.class;
  }

  /** The column <code>information_schema.sequences.sequence_catalog</code>. */
  public final TableField<Record, String> SEQUENCE_CATALOG =
      createField(DSL.name("sequence_catalog"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.sequence_schema</code>. */
  public final TableField<Record, String> SEQUENCE_SCHEMA =
      createField(DSL.name("sequence_schema"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.sequence_name</code>. */
  public final TableField<Record, String> SEQUENCE_NAME =
      createField(DSL.name("sequence_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.data_type</code>. */
  public final TableField<Record, String> DATA_TYPE =
      createField(DSL.name("data_type"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.numeric_precision</code>. */
  public final TableField<Record, Integer> NUMERIC_PRECISION =
      createField(DSL.name("numeric_precision"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.sequences.numeric_precision_radix</code>. */
  public final TableField<Record, Integer> NUMERIC_PRECISION_RADIX =
      createField(DSL.name("numeric_precision_radix"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.sequences.numeric_scale</code>. */
  public final TableField<Record, Integer> NUMERIC_SCALE =
      createField(DSL.name("numeric_scale"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.sequences.start_value</code>. */
  public final TableField<Record, String> START_VALUE =
      createField(DSL.name("start_value"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.minimum_value</code>. */
  public final TableField<Record, String> MINIMUM_VALUE =
      createField(DSL.name("minimum_value"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.maximum_value</code>. */
  public final TableField<Record, String> MAXIMUM_VALUE =
      createField(DSL.name("maximum_value"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.increment</code>. */
  public final TableField<Record, String> INCREMENT =
      createField(DSL.name("increment"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.sequences.cycle_option</code>. */
  public final TableField<Record, String> CYCLE_OPTION =
      createField(DSL.name("cycle_option"), SQLDataType.VARCHAR(3), this, "");

  private Sequences(Name alias, Table<Record> aliased) {
    this(alias, aliased, null);
  }

  private Sequences(Name alias, Table<Record> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
  }

  /** Create an aliased <code>information_schema.sequences</code> table reference */
  public Sequences(String alias) {
    this(DSL.name(alias), SEQUENCES);
  }

  /** Create an aliased <code>information_schema.sequences</code> table reference */
  public Sequences(Name alias) {
    this(alias, SEQUENCES);
  }

  /** Create a <code>information_schema.sequences</code> table reference */
  public Sequences() {
    this(DSL.name("sequences"), null);
  }

  public <O extends Record> Sequences(Table<O> child, ForeignKey<O, Record> key) {
    super(child, key, SEQUENCES);
  }

  @Override
  public Schema getSchema() {
    return InformationSchema.INFORMATION_SCHEMA;
  }

  @Override
  public UniqueKey<Record> getPrimaryKey() {
    return Keys.SYNTHETIC_PK_SEQUENCES;
  }

  @Override
  public List<UniqueKey<Record>> getKeys() {
    return Arrays.<UniqueKey<Record>>asList(Keys.SYNTHETIC_PK_SEQUENCES);
  }

  @Override
  public List<ForeignKey<Record, ?>> getReferences() {
    return Arrays.<ForeignKey<Record, ?>>asList(
        Keys.SEQUENCES__SYNTHETIC_FK_SEQUENCES__SYNTHETIC_PK_SCHEMATA);
  }

  public Schemata schemata() {
    return new Schemata(this, Keys.SEQUENCES__SYNTHETIC_FK_SEQUENCES__SYNTHETIC_PK_SCHEMATA);
  }

  @Override
  public Sequences as(String alias) {
    return new Sequences(DSL.name(alias), this);
  }

  @Override
  public Sequences as(Name alias) {
    return new Sequences(alias, this);
  }

  /** Rename this table */
  @Override
  public Sequences rename(String name) {
    return new Sequences(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Sequences rename(Name name) {
    return new Sequences(name, null);
  }
}
