/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.meta.postgres.information_schema.tables;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.postgres.information_schema.InformationSchema;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Parameters extends TableImpl<Record> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>information_schema.parameters</code> */
  public static final Parameters PARAMETERS = new Parameters();

  /** The class holding records for this type */
  @Override
  public Class<Record> getRecordType() {
    return Record.class;
  }

  /** The column <code>information_schema.parameters.specific_catalog</code>. */
  public final TableField<Record, String> SPECIFIC_CATALOG =
      createField(DSL.name("specific_catalog"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.specific_schema</code>. */
  public final TableField<Record, String> SPECIFIC_SCHEMA =
      createField(DSL.name("specific_schema"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.specific_name</code>. */
  public final TableField<Record, String> SPECIFIC_NAME =
      createField(DSL.name("specific_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.ordinal_position</code>. */
  public final TableField<Record, Integer> ORDINAL_POSITION =
      createField(DSL.name("ordinal_position"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.parameter_mode</code>. */
  public final TableField<Record, String> PARAMETER_MODE =
      createField(DSL.name("parameter_mode"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.is_result</code>. */
  public final TableField<Record, String> IS_RESULT =
      createField(DSL.name("is_result"), SQLDataType.VARCHAR(3), this, "");

  /** The column <code>information_schema.parameters.as_locator</code>. */
  public final TableField<Record, String> AS_LOCATOR =
      createField(DSL.name("as_locator"), SQLDataType.VARCHAR(3), this, "");

  /** The column <code>information_schema.parameters.parameter_name</code>. */
  public final TableField<Record, String> PARAMETER_NAME =
      createField(DSL.name("parameter_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.data_type</code>. */
  public final TableField<Record, String> DATA_TYPE =
      createField(DSL.name("data_type"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.character_maximum_length</code>. */
  public final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH =
      createField(DSL.name("character_maximum_length"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.character_octet_length</code>. */
  public final TableField<Record, Integer> CHARACTER_OCTET_LENGTH =
      createField(DSL.name("character_octet_length"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.character_set_catalog</code>. */
  public final TableField<Record, String> CHARACTER_SET_CATALOG =
      createField(DSL.name("character_set_catalog"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.character_set_schema</code>. */
  public final TableField<Record, String> CHARACTER_SET_SCHEMA =
      createField(DSL.name("character_set_schema"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.character_set_name</code>. */
  public final TableField<Record, String> CHARACTER_SET_NAME =
      createField(DSL.name("character_set_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.collation_catalog</code>. */
  public final TableField<Record, String> COLLATION_CATALOG =
      createField(DSL.name("collation_catalog"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.collation_schema</code>. */
  public final TableField<Record, String> COLLATION_SCHEMA =
      createField(DSL.name("collation_schema"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.collation_name</code>. */
  public final TableField<Record, String> COLLATION_NAME =
      createField(DSL.name("collation_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.numeric_precision</code>. */
  public final TableField<Record, Integer> NUMERIC_PRECISION =
      createField(DSL.name("numeric_precision"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.numeric_precision_radix</code>. */
  public final TableField<Record, Integer> NUMERIC_PRECISION_RADIX =
      createField(DSL.name("numeric_precision_radix"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.numeric_scale</code>. */
  public final TableField<Record, Integer> NUMERIC_SCALE =
      createField(DSL.name("numeric_scale"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.datetime_precision</code>. */
  public final TableField<Record, Integer> DATETIME_PRECISION =
      createField(DSL.name("datetime_precision"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.interval_type</code>. */
  public final TableField<Record, String> INTERVAL_TYPE =
      createField(DSL.name("interval_type"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.interval_precision</code>. */
  public final TableField<Record, Integer> INTERVAL_PRECISION =
      createField(DSL.name("interval_precision"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.udt_catalog</code>. */
  public final TableField<Record, String> UDT_CATALOG =
      createField(DSL.name("udt_catalog"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.udt_schema</code>. */
  public final TableField<Record, String> UDT_SCHEMA =
      createField(DSL.name("udt_schema"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.udt_name</code>. */
  public final TableField<Record, String> UDT_NAME =
      createField(DSL.name("udt_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.scope_catalog</code>. */
  public final TableField<Record, String> SCOPE_CATALOG =
      createField(DSL.name("scope_catalog"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.scope_schema</code>. */
  public final TableField<Record, String> SCOPE_SCHEMA =
      createField(DSL.name("scope_schema"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.scope_name</code>. */
  public final TableField<Record, String> SCOPE_NAME =
      createField(DSL.name("scope_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.maximum_cardinality</code>. */
  public final TableField<Record, Integer> MAXIMUM_CARDINALITY =
      createField(DSL.name("maximum_cardinality"), SQLDataType.INTEGER, this, "");

  /** The column <code>information_schema.parameters.dtd_identifier</code>. */
  public final TableField<Record, String> DTD_IDENTIFIER =
      createField(DSL.name("dtd_identifier"), SQLDataType.VARCHAR, this, "");

  /** The column <code>information_schema.parameters.parameter_default</code>. */
  public final TableField<Record, String> PARAMETER_DEFAULT =
      createField(DSL.name("parameter_default"), SQLDataType.VARCHAR, this, "");

  private Parameters(Name alias, Table<Record> aliased) {
    this(alias, aliased, null);
  }

  private Parameters(Name alias, Table<Record> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
  }

  /** Create an aliased <code>information_schema.parameters</code> table reference */
  public Parameters(String alias) {
    this(DSL.name(alias), PARAMETERS);
  }

  /** Create an aliased <code>information_schema.parameters</code> table reference */
  public Parameters(Name alias) {
    this(alias, PARAMETERS);
  }

  /** Create a <code>information_schema.parameters</code> table reference */
  public Parameters() {
    this(DSL.name("parameters"), null);
  }

  public <O extends Record> Parameters(Table<O> child, ForeignKey<O, Record> key) {
    super(child, key, PARAMETERS);
  }

  @Override
  public Schema getSchema() {
    return InformationSchema.INFORMATION_SCHEMA;
  }

  @Override
  public Parameters as(String alias) {
    return new Parameters(DSL.name(alias), this);
  }

  @Override
  public Parameters as(Name alias) {
    return new Parameters(alias, this);
  }

  /** Rename this table */
  @Override
  public Parameters rename(String name) {
    return new Parameters(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Parameters rename(Name name) {
    return new Parameters(name, null);
  }
}
