/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.meta.postgres.pg_catalog.tables;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.postgres.pg_catalog.PgCatalog;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PgAttribute extends TableImpl<Record> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>pg_catalog.pg_attribute</code> */
  public static final PgAttribute PG_ATTRIBUTE = new PgAttribute();

  /** The class holding records for this type */
  @Override
  public Class<Record> getRecordType() {
    return Record.class;
  }

  /** The column <code>pg_catalog.pg_attribute.attrelid</code>. */
  public final TableField<Record, Long> ATTRELID =
      createField(DSL.name("attrelid"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attname</code>. */
  public final TableField<Record, String> ATTNAME =
      createField(DSL.name("attname"), SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.atttypid</code>. */
  public final TableField<Record, Long> ATTTYPID =
      createField(DSL.name("atttypid"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attstattarget</code>. */
  public final TableField<Record, Integer> ATTSTATTARGET =
      createField(DSL.name("attstattarget"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attlen</code>. */
  public final TableField<Record, Short> ATTLEN =
      createField(DSL.name("attlen"), SQLDataType.SMALLINT.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attnum</code>. */
  public final TableField<Record, Short> ATTNUM =
      createField(DSL.name("attnum"), SQLDataType.SMALLINT.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attndims</code>. */
  public final TableField<Record, Integer> ATTNDIMS =
      createField(DSL.name("attndims"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attcacheoff</code>. */
  public final TableField<Record, Integer> ATTCACHEOFF =
      createField(DSL.name("attcacheoff"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.atttypmod</code>. */
  public final TableField<Record, Integer> ATTTYPMOD =
      createField(DSL.name("atttypmod"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attbyval</code>. */
  public final TableField<Record, Boolean> ATTBYVAL =
      createField(DSL.name("attbyval"), SQLDataType.BOOLEAN.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attstorage</code>. */
  public final TableField<Record, String> ATTSTORAGE =
      createField(DSL.name("attstorage"), SQLDataType.CHAR.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attalign</code>. */
  public final TableField<Record, String> ATTALIGN =
      createField(DSL.name("attalign"), SQLDataType.CHAR.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attnotnull</code>. */
  public final TableField<Record, Boolean> ATTNOTNULL =
      createField(DSL.name("attnotnull"), SQLDataType.BOOLEAN.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.atthasdef</code>. */
  public final TableField<Record, Boolean> ATTHASDEF =
      createField(DSL.name("atthasdef"), SQLDataType.BOOLEAN.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.atthasmissing</code>. */
  public final TableField<Record, Boolean> ATTHASMISSING =
      createField(DSL.name("atthasmissing"), SQLDataType.BOOLEAN.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attidentity</code>. */
  public final TableField<Record, String> ATTIDENTITY =
      createField(DSL.name("attidentity"), SQLDataType.CHAR.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attgenerated</code>. */
  public final TableField<Record, String> ATTGENERATED =
      createField(DSL.name("attgenerated"), SQLDataType.CHAR.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attisdropped</code>. */
  public final TableField<Record, Boolean> ATTISDROPPED =
      createField(DSL.name("attisdropped"), SQLDataType.BOOLEAN.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attislocal</code>. */
  public final TableField<Record, Boolean> ATTISLOCAL =
      createField(DSL.name("attislocal"), SQLDataType.BOOLEAN.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attinhcount</code>. */
  public final TableField<Record, Integer> ATTINHCOUNT =
      createField(DSL.name("attinhcount"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attcollation</code>. */
  public final TableField<Record, Long> ATTCOLLATION =
      createField(DSL.name("attcollation"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>pg_catalog.pg_attribute.attacl</code>. */
  public final TableField<Record, String[]> ATTACL =
      createField(DSL.name("attacl"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

  /** The column <code>pg_catalog.pg_attribute.attoptions</code>. */
  public final TableField<Record, String[]> ATTOPTIONS =
      createField(DSL.name("attoptions"), SQLDataType.CLOB.getArrayDataType(), this, "");

  /** The column <code>pg_catalog.pg_attribute.attfdwoptions</code>. */
  public final TableField<Record, String[]> ATTFDWOPTIONS =
      createField(DSL.name("attfdwoptions"), SQLDataType.CLOB.getArrayDataType(), this, "");

  /**
   * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify
   *     how this type should be handled. Deprecation can be turned off using {@literal
   *     <deprecationOnUnknownTypes/>} in your code generator configuration.
   */
  public final TableField<Record, Object> ATTMISSINGVAL =
      createField(
          DSL.name("attmissingval"),
          org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyarray\""),
          this,
          "");

  private PgAttribute(Name alias, Table<Record> aliased) {
    this(alias, aliased, null);
  }

  private PgAttribute(Name alias, Table<Record> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>pg_catalog.pg_attribute</code> table reference */
  public PgAttribute(String alias) {
    this(DSL.name(alias), PG_ATTRIBUTE);
  }

  /** Create an aliased <code>pg_catalog.pg_attribute</code> table reference */
  public PgAttribute(Name alias) {
    this(alias, PG_ATTRIBUTE);
  }

  /** Create a <code>pg_catalog.pg_attribute</code> table reference */
  public PgAttribute() {
    this(DSL.name("pg_attribute"), null);
  }

  public <O extends Record> PgAttribute(Table<O> child, ForeignKey<O, Record> key) {
    super(child, key, PG_ATTRIBUTE);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : PgCatalog.PG_CATALOG;
  }

  @Override
  public PgAttribute as(String alias) {
    return new PgAttribute(DSL.name(alias), this);
  }

  @Override
  public PgAttribute as(Name alias) {
    return new PgAttribute(alias, this);
  }

  /** Rename this table */
  @Override
  public PgAttribute rename(String name) {
    return new PgAttribute(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public PgAttribute rename(Name name) {
    return new PgAttribute(name, null);
  }
}
