/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.example.jpa.jooq.tables.records;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.example.jpa.jooq.tables.Language;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LanguageRecord extends UpdatableRecordImpl<LanguageRecord>
    implements Record2<Integer, String> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>LANGUAGE.LANGUAGEID</code>. */
  public void setLanguageid(Integer value) {
    set(0, value);
  }

  /** Getter for <code>LANGUAGE.LANGUAGEID</code>. */
  public Integer getLanguageid() {
    return (Integer) get(0);
  }

  /** Setter for <code>LANGUAGE.NAME</code>. */
  public void setName(String value) {
    set(1, value);
  }

  /** Getter for <code>LANGUAGE.NAME</code>. */
  public String getName() {
    return (String) get(1);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<Integer> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record2 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row2<Integer, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }

  @Override
  public Row2<Integer, String> valuesRow() {
    return (Row2) super.valuesRow();
  }

  @Override
  public Field<Integer> field1() {
    return Language.LANGUAGE.LANGUAGEID;
  }

  @Override
  public Field<String> field2() {
    return Language.LANGUAGE.NAME;
  }

  @Override
  public Integer component1() {
    return getLanguageid();
  }

  @Override
  public String component2() {
    return getName();
  }

  @Override
  public Integer value1() {
    return getLanguageid();
  }

  @Override
  public String value2() {
    return getName();
  }

  @Override
  public LanguageRecord value1(Integer value) {
    setLanguageid(value);
    return this;
  }

  @Override
  public LanguageRecord value2(String value) {
    setName(value);
    return this;
  }

  @Override
  public LanguageRecord values(Integer value1, String value2) {
    value1(value1);
    value2(value2);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached LanguageRecord */
  public LanguageRecord() {
    super(Language.LANGUAGE);
  }

  /** Create a detached, initialised LanguageRecord */
  public LanguageRecord(Integer languageid, String name) {
    super(Language.LANGUAGE);

    setLanguageid(languageid);
    setName(name);
  }
}
