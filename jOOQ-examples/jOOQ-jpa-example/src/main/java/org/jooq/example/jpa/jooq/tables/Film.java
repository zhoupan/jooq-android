/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.example.jpa.jooq.tables;

import java.time.Year;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.example.jpa.jooq.DefaultSchema;
import org.jooq.example.jpa.jooq.Keys;
import org.jooq.example.jpa.jooq.tables.records.FilmRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Film extends TableImpl<FilmRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>FILM</code> */
  public static final Film FILM = new Film();

  /** The class holding records for this type */
  @Override
  public Class<FilmRecord> getRecordType() {
    return FilmRecord.class;
  }

  /** The column <code>FILM.FILMID</code>. */
  public final TableField<FilmRecord, Integer> FILMID =
      createField(DSL.name("FILMID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

  /** The column <code>FILM.LENGTH</code>. */
  public final TableField<FilmRecord, Integer> LENGTH =
      createField(DSL.name("LENGTH"), SQLDataType.INTEGER, this, "");

  /** The column <code>FILM.RELEASE_YEAR</code>. */
  public final TableField<FilmRecord, Year> RELEASE_YEAR =
      createField(
          DSL.name("RELEASE_YEAR"),
          SQLDataType.INTEGER,
          this,
          "",
          new org.jooq.impl.JPAConverter(org.jooq.example.jpa.converters.YearConverter.class));

  /** The column <code>FILM.TITLE</code>. */
  public final TableField<FilmRecord, String> TITLE =
      createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "");

  /** The column <code>FILM.LANGUAGE_LANGUAGEID</code>. */
  public final TableField<FilmRecord, Integer> LANGUAGE_LANGUAGEID =
      createField(DSL.name("LANGUAGE_LANGUAGEID"), SQLDataType.INTEGER, this, "");

  /** The column <code>FILM.ORIGINALLANGUAGE_LANGUAGEID</code>. */
  public final TableField<FilmRecord, Integer> ORIGINALLANGUAGE_LANGUAGEID =
      createField(DSL.name("ORIGINALLANGUAGE_LANGUAGEID"), SQLDataType.INTEGER, this, "");

  private Film(Name alias, Table<FilmRecord> aliased) {
    this(alias, aliased, null);
  }

  private Film(Name alias, Table<FilmRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>FILM</code> table reference */
  public Film(String alias) {
    this(DSL.name(alias), FILM);
  }

  /** Create an aliased <code>FILM</code> table reference */
  public Film(Name alias) {
    this(alias, FILM);
  }

  /** Create a <code>FILM</code> table reference */
  public Film() {
    this(DSL.name("FILM"), null);
  }

  public <O extends Record> Film(Table<O> child, ForeignKey<O, FilmRecord> key) {
    super(child, key, FILM);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public Identity<FilmRecord, Integer> getIdentity() {
    return (Identity<FilmRecord, Integer>) super.getIdentity();
  }

  @Override
  public UniqueKey<FilmRecord> getPrimaryKey() {
    return Keys.CONSTRAINT_2;
  }

  @Override
  public List<ForeignKey<FilmRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FKD2YJC1RU34H1SMWLA3FX7B6NX, Keys.FKN2UB730RPO5B5E9X6U2LWL9FT);
  }

  private transient Language _fkd2yjc1ru34h1smwla3fx7b6nx;
  private transient Language _fkn2ub730rpo5b5e9x6u2lwl9ft;

  public Language fkd2yjc1ru34h1smwla3fx7b6nx() {
    if (_fkd2yjc1ru34h1smwla3fx7b6nx == null)
      _fkd2yjc1ru34h1smwla3fx7b6nx = new Language(this, Keys.FKD2YJC1RU34H1SMWLA3FX7B6NX);

    return _fkd2yjc1ru34h1smwla3fx7b6nx;
  }

  public Language fkn2ub730rpo5b5e9x6u2lwl9ft() {
    if (_fkn2ub730rpo5b5e9x6u2lwl9ft == null)
      _fkn2ub730rpo5b5e9x6u2lwl9ft = new Language(this, Keys.FKN2UB730RPO5B5E9X6U2LWL9FT);

    return _fkn2ub730rpo5b5e9x6u2lwl9ft;
  }

  @Override
  public Film as(String alias) {
    return new Film(DSL.name(alias), this);
  }

  @Override
  public Film as(Name alias) {
    return new Film(alias, this);
  }

  /** Rename this table */
  @Override
  public Film rename(String name) {
    return new Film(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Film rename(Name name) {
    return new Film(name, null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<Integer, Integer, Year, String, Integer, Integer> fieldsRow() {
    return (Row6) super.fieldsRow();
  }
}
