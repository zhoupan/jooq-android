/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2


import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.example.kotlin.db.h2.tables.Author
import org.jooq.example.kotlin.db.h2.tables.Book
import org.jooq.example.kotlin.db.h2.tables.BookStore
import org.jooq.example.kotlin.db.h2.tables.BookToBookStore
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Public : SchemaImpl("PUBLIC", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>PUBLIC</code>
         */
        val PUBLIC: Public = Public()
    }

    /**
     * The table <code>PUBLIC.AUTHOR</code>.
     */
    val AUTHOR: Author get() = Author.AUTHOR

    /**
     * The table <code>PUBLIC.BOOK</code>.
     */
    val BOOK: Book get() = Book.BOOK

    /**
     * The table <code>PUBLIC.BOOK_STORE</code>.
     */
    val BOOK_STORE: BookStore get() = BookStore.BOOK_STORE

    /**
     * The table <code>PUBLIC.BOOK_TO_BOOK_STORE</code>.
     */
    val BOOK_TO_BOOK_STORE: BookToBookStore get() = BookToBookStore.BOOK_TO_BOOK_STORE

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        Author.AUTHOR,
        Book.BOOK,
        BookStore.BOOK_STORE,
        BookToBookStore.BOOK_TO_BOOK_STORE
    )
}
