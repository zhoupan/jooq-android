/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2.keys


import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.example.kotlin.db.h2.tables.Author
import org.jooq.example.kotlin.db.h2.tables.Book
import org.jooq.example.kotlin.db.h2.tables.BookStore
import org.jooq.example.kotlin.db.h2.tables.BookToBookStore
import org.jooq.example.kotlin.db.h2.tables.records.AuthorRecord
import org.jooq.example.kotlin.db.h2.tables.records.BookRecord
import org.jooq.example.kotlin.db.h2.tables.records.BookStoreRecord
import org.jooq.example.kotlin.db.h2.tables.records.BookToBookStoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val PK_T_AUTHOR: UniqueKey<AuthorRecord> = Internal.createUniqueKey(Author.AUTHOR, DSL.name("PK_T_AUTHOR"), arrayOf(Author.AUTHOR.ID), true)
val PK_T_BOOK: UniqueKey<BookRecord> = Internal.createUniqueKey(Book.BOOK, DSL.name("PK_T_BOOK"), arrayOf(Book.BOOK.ID), true)
val UK_T_BOOK_STORE_NAME: UniqueKey<BookStoreRecord> = Internal.createUniqueKey(BookStore.BOOK_STORE, DSL.name("UK_T_BOOK_STORE_NAME"), arrayOf(BookStore.BOOK_STORE.NAME), true)
val PK_B2BS: UniqueKey<BookToBookStoreRecord> = Internal.createUniqueKey(BookToBookStore.BOOK_TO_BOOK_STORE, DSL.name("PK_B2BS"), arrayOf(BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME, BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val FK_T_BOOK_AUTHOR_ID: ForeignKey<BookRecord, AuthorRecord> = Internal.createForeignKey(Book.BOOK, DSL.name("FK_T_BOOK_AUTHOR_ID"), arrayOf(Book.BOOK.AUTHOR_ID), org.jooq.example.kotlin.db.h2.keys.PK_T_AUTHOR, arrayOf(Author.AUTHOR.ID), true)
val FK_T_BOOK_CO_AUTHOR_ID: ForeignKey<BookRecord, AuthorRecord> = Internal.createForeignKey(Book.BOOK, DSL.name("FK_T_BOOK_CO_AUTHOR_ID"), arrayOf(Book.BOOK.CO_AUTHOR_ID), org.jooq.example.kotlin.db.h2.keys.PK_T_AUTHOR, arrayOf(Author.AUTHOR.ID), true)
val FK_B2BS_B_ID: ForeignKey<BookToBookStoreRecord, BookRecord> = Internal.createForeignKey(BookToBookStore.BOOK_TO_BOOK_STORE, DSL.name("FK_B2BS_B_ID"), arrayOf(BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID), org.jooq.example.kotlin.db.h2.keys.PK_T_BOOK, arrayOf(Book.BOOK.ID), true)
val FK_B2BS_BS_NAME: ForeignKey<BookToBookStoreRecord, BookStoreRecord> = Internal.createForeignKey(BookToBookStore.BOOK_TO_BOOK_STORE, DSL.name("FK_B2BS_BS_NAME"), arrayOf(BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME), org.jooq.example.kotlin.db.h2.keys.UK_T_BOOK_STORE_NAME, arrayOf(BookStore.BOOK_STORE.NAME), true)
