/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2.tables


import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.example.kotlin.db.h2.Public
import org.jooq.example.kotlin.db.h2.keys.FK_B2BS_BS_NAME
import org.jooq.example.kotlin.db.h2.keys.FK_B2BS_B_ID
import org.jooq.example.kotlin.db.h2.keys.PK_B2BS
import org.jooq.example.kotlin.db.h2.tables.records.BookToBookStoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookToBookStore(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BookToBookStoreRecord>?,
    aliased: Table<BookToBookStoreRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BookToBookStoreRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>PUBLIC.BOOK_TO_BOOK_STORE</code>
         */
        val BOOK_TO_BOOK_STORE: BookToBookStore = BookToBookStore()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookToBookStoreRecord> = BookToBookStoreRecord::class.java

    /**
     * The column <code>PUBLIC.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME</code>.
     */
    val BOOK_STORE_NAME: TableField<BookToBookStoreRecord, String?> = createField(DSL.name("BOOK_STORE_NAME"), SQLDataType.VARCHAR(400).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.BOOK_TO_BOOK_STORE.BOOK_ID</code>.
     */
    val BOOK_ID: TableField<BookToBookStoreRecord, Int?> = createField(DSL.name("BOOK_ID"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.BOOK_TO_BOOK_STORE.STOCK</code>.
     */
    val STOCK: TableField<BookToBookStoreRecord, Int?> = createField(DSL.name("STOCK"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<BookToBookStoreRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BookToBookStoreRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table reference
     */
    constructor(): this(DSL.name("BOOK_TO_BOOK_STORE"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BookToBookStoreRecord>): this(Internal.createPathAlias(child, key), child, key, BOOK_TO_BOOK_STORE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<BookToBookStoreRecord> = PK_B2BS
    override fun getReferences(): List<ForeignKey<BookToBookStoreRecord, *>> = listOf(FK_B2BS_BS_NAME, FK_B2BS_B_ID)

    private lateinit var _bookStore: BookStore
    private lateinit var _book: Book
    fun bookStore(): BookStore {
        if (!this::_bookStore.isInitialized)
            _bookStore = BookStore(this, FK_B2BS_BS_NAME)

        return _bookStore;
    }
    fun book(): Book {
        if (!this::_book.isInitialized)
            _book = Book(this, FK_B2BS_B_ID)

        return _book;
    }
    override fun `as`(alias: String): BookToBookStore = BookToBookStore(DSL.name(alias), this)
    override fun `as`(alias: Name): BookToBookStore = BookToBookStore(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BookToBookStore = BookToBookStore(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BookToBookStore = BookToBookStore(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, Int?, Int?> = super.fieldsRow() as Row3<String?, Int?, Int?>
}
