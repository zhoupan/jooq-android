/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2.tables.records


import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.example.kotlin.db.h2.tables.BookToBookStore
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookToBookStoreRecord() : UpdatableRecordImpl<BookToBookStoreRecord>(BookToBookStore.BOOK_TO_BOOK_STORE), Record3<String?, Int?, Int?> {

    var bookStoreName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    var bookId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var stock: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, Int?> = super.key() as Record2<String?, Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, Int?, Int?> = super.fieldsRow() as Row3<String?, Int?, Int?>
    override fun valuesRow(): Row3<String?, Int?, Int?> = super.valuesRow() as Row3<String?, Int?, Int?>
    override fun field1(): Field<String?> = BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME
    override fun field2(): Field<Int?> = BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID
    override fun field3(): Field<Int?> = BookToBookStore.BOOK_TO_BOOK_STORE.STOCK
    override fun component1(): String? = bookStoreName
    override fun component2(): Int? = bookId
    override fun component3(): Int? = stock
    override fun value1(): String? = bookStoreName
    override fun value2(): Int? = bookId
    override fun value3(): Int? = stock

    override fun value1(value: String?): BookToBookStoreRecord {
        this.bookStoreName = value
        return this
    }

    override fun value2(value: Int?): BookToBookStoreRecord {
        this.bookId = value
        return this
    }

    override fun value3(value: Int?): BookToBookStoreRecord {
        this.stock = value
        return this
    }

    override fun values(value1: String?, value2: Int?, value3: Int?): BookToBookStoreRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised BookToBookStoreRecord
     */
    constructor(bookStoreName: String? = null, bookId: Int? = null, stock: Int? = null): this() {
        this.bookStoreName = bookStoreName
        this.bookId = bookId
        this.stock = stock
    }

    /**
     * Create a detached, initialised BookToBookStoreRecord
     */
    constructor(value: org.jooq.example.kotlin.db.h2.tables.pojos.BookToBookStore): this() {
        this.bookStoreName = value.bookStoreName
        this.bookId = value.bookId
        this.stock = value.stock
    }
}
