/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.example.testcontainers.db.tables;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.example.testcontainers.db.Indexes;
import org.jooq.example.testcontainers.db.Keys;
import org.jooq.example.testcontainers.db.Public;
import org.jooq.example.testcontainers.db.enums.MpaaRating;
import org.jooq.example.testcontainers.db.tables.records.FilmRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Film extends TableImpl<FilmRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.film</code> */
  public static final Film FILM = new Film();

  /** The class holding records for this type */
  @Override
  public Class<FilmRecord> getRecordType() {
    return FilmRecord.class;
  }

  /** The column <code>public.film.film_id</code>. */
  public final TableField<FilmRecord, Long> FILM_ID =
      createField(DSL.name("film_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /** The column <code>public.film.title</code>. */
  public final TableField<FilmRecord, String> TITLE =
      createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /** The column <code>public.film.description</code>. */
  public final TableField<FilmRecord, String> DESCRIPTION =
      createField(DSL.name("description"), SQLDataType.CLOB, this, "");

  /** The column <code>public.film.release_year</code>. */
  public final TableField<FilmRecord, Integer> RELEASE_YEAR =
      createField(
          DSL.name("release_year"),
          org.jooq.example.testcontainers.db.Domains.YEAR.getDataType(),
          this,
          "");

  /** The column <code>public.film.language_id</code>. */
  public final TableField<FilmRecord, Long> LANGUAGE_ID =
      createField(DSL.name("language_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>public.film.original_language_id</code>. */
  public final TableField<FilmRecord, Long> ORIGINAL_LANGUAGE_ID =
      createField(DSL.name("original_language_id"), SQLDataType.BIGINT, this, "");

  /** The column <code>public.film.rental_duration</code>. */
  public final TableField<FilmRecord, Short> RENTAL_DURATION =
      createField(
          DSL.name("rental_duration"),
          SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("3", SQLDataType.SMALLINT)),
          this,
          "");

  /** The column <code>public.film.rental_rate</code>. */
  public final TableField<FilmRecord, BigDecimal> RENTAL_RATE =
      createField(
          DSL.name("rental_rate"),
          SQLDataType.NUMERIC(4, 2)
              .nullable(false)
              .defaultValue(DSL.field("4.99", SQLDataType.NUMERIC)),
          this,
          "");

  /** The column <code>public.film.length</code>. */
  public final TableField<FilmRecord, Short> LENGTH =
      createField(DSL.name("length"), SQLDataType.SMALLINT, this, "");

  /** The column <code>public.film.replacement_cost</code>. */
  public final TableField<FilmRecord, BigDecimal> REPLACEMENT_COST =
      createField(
          DSL.name("replacement_cost"),
          SQLDataType.NUMERIC(5, 2)
              .nullable(false)
              .defaultValue(DSL.field("19.99", SQLDataType.NUMERIC)),
          this,
          "");

  /** The column <code>public.film.rating</code>. */
  public final TableField<FilmRecord, MpaaRating> RATING =
      createField(
          DSL.name("rating"),
          SQLDataType.VARCHAR
              .defaultValue(DSL.field("'G'::mpaa_rating", SQLDataType.VARCHAR))
              .asEnumDataType(org.jooq.example.testcontainers.db.enums.MpaaRating.class),
          this,
          "");

  /** The column <code>public.film.last_update</code>. */
  public final TableField<FilmRecord, LocalDateTime> LAST_UPDATE =
      createField(
          DSL.name("last_update"),
          SQLDataType.LOCALDATETIME(6)
              .nullable(false)
              .defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>public.film.special_features</code>. */
  public final TableField<FilmRecord, String[]> SPECIAL_FEATURES =
      createField(DSL.name("special_features"), SQLDataType.CLOB.getArrayDataType(), this, "");

  /**
   * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify
   *     how this type should be handled. Deprecation can be turned off using {@literal
   *     <deprecationOnUnknownTypes/>} in your code generator configuration.
   */
  @Deprecated
  public final TableField<FilmRecord, Object> FULLTEXT =
      createField(
          DSL.name("fulltext"),
          org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\"")
              .nullable(false),
          this,
          "");

  private Film(Name alias, Table<FilmRecord> aliased) {
    this(alias, aliased, null);
  }

  private Film(Name alias, Table<FilmRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>public.film</code> table reference */
  public Film(String alias) {
    this(DSL.name(alias), FILM);
  }

  /** Create an aliased <code>public.film</code> table reference */
  public Film(Name alias) {
    this(alias, FILM);
  }

  /** Create a <code>public.film</code> table reference */
  public Film() {
    this(DSL.name("film"), null);
  }

  public <O extends Record> Film(Table<O> child, ForeignKey<O, FilmRecord> key) {
    super(child, key, FILM);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.asList(
        Indexes.FILM_FULLTEXT_IDX,
        Indexes.IDX_FK_LANGUAGE_ID,
        Indexes.IDX_FK_ORIGINAL_LANGUAGE_ID,
        Indexes.IDX_TITLE);
  }

  @Override
  public Identity<FilmRecord, Long> getIdentity() {
    return (Identity<FilmRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<FilmRecord> getPrimaryKey() {
    return Keys.FILM_PKEY;
  }

  @Override
  public List<ForeignKey<FilmRecord, ?>> getReferences() {
    return Arrays.asList(
        Keys.FILM__FILM_LANGUAGE_ID_FKEY, Keys.FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY);
  }

  private transient Language _filmLanguageIdFkey;
  private transient Language _filmOriginalLanguageIdFkey;

  public Language filmLanguageIdFkey() {
    if (_filmLanguageIdFkey == null)
      _filmLanguageIdFkey = new Language(this, Keys.FILM__FILM_LANGUAGE_ID_FKEY);

    return _filmLanguageIdFkey;
  }

  public Language filmOriginalLanguageIdFkey() {
    if (_filmOriginalLanguageIdFkey == null)
      _filmOriginalLanguageIdFkey = new Language(this, Keys.FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY);

    return _filmOriginalLanguageIdFkey;
  }

  @Override
  public Film as(String alias) {
    return new Film(DSL.name(alias), this);
  }

  @Override
  public Film as(Name alias) {
    return new Film(alias, this);
  }

  /** Rename this table */
  @Override
  public Film rename(String name) {
    return new Film(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Film rename(Name name) {
    return new Film(name, null);
  }

  // -------------------------------------------------------------------------
  // Row14 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row14<
          Long,
          String,
          String,
          Integer,
          Long,
          Long,
          Short,
          BigDecimal,
          Short,
          BigDecimal,
          MpaaRating,
          LocalDateTime,
          String[],
          Object>
      fieldsRow() {
    return (Row14) super.fieldsRow();
  }
}
