/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Other licenses:
 * -----------------------------------------------------------------------------
 * Commercial licenses for this work are available. These replace the above
 * ASL 2.0 and offer limited warranties, support, maintenance, and commercial
 * database integrations.
 *
 * For more information, please visit: http://www.jooq.org/licenses
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package org.jooq.example.testcontainers.db.tables.records;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Row1;
import org.jooq.example.testcontainers.db.tables.FilmInStock;
import org.jooq.impl.TableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FilmInStockRecord extends TableRecordImpl<FilmInStockRecord>
    implements Record1<Integer> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>public.film_in_stock.p_film_count</code>. */
  public void setPFilmCount(Integer value) {
    set(0, value);
  }

  /** Getter for <code>public.film_in_stock.p_film_count</code>. */
  public Integer getPFilmCount() {
    return (Integer) get(0);
  }

  // -------------------------------------------------------------------------
  // Record1 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row1<Integer> fieldsRow() {
    return (Row1) super.fieldsRow();
  }

  @Override
  public Row1<Integer> valuesRow() {
    return (Row1) super.valuesRow();
  }

  @Override
  public Field<Integer> field1() {
    return FilmInStock.FILM_IN_STOCK.P_FILM_COUNT;
  }

  @Override
  public Integer component1() {
    return getPFilmCount();
  }

  @Override
  public Integer value1() {
    return getPFilmCount();
  }

  @Override
  public FilmInStockRecord value1(Integer value) {
    setPFilmCount(value);
    return this;
  }

  @Override
  public FilmInStockRecord values(Integer value1) {
    value1(value1);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached FilmInStockRecord */
  public FilmInStockRecord() {
    super(FilmInStock.FILM_IN_STOCK);
  }

  /** Create a detached, initialised FilmInStockRecord */
  public FilmInStockRecord(Integer pFilmCount) {
    super(FilmInStock.FILM_IN_STOCK);

    setPFilmCount(pFilmCount);
  }
}
